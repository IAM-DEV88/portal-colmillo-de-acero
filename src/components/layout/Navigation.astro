---
const navItems = [
  { name: 'Inicio', href: '/', icon: 'home' },
  { name: 'Roster', href: '/roster', icon: 'users' },
  { name: 'Raids', href: '/raids', icon: 'dungeon' },
  { name: 'Guías', href: '/guides', icon: 'book' },
];

const currentPath = Astro.url.pathname;
---

<nav class="fixed top-0 left-0 right-0 z-[60] bg-gradient-to-r from-gray-900/95 to-amber-900/95 backdrop-blur border-b border-amber-600/30 shadow-lg transition-all duration-300">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-20">
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center group">
          <img src="/images/logo.png" alt="Colmillo de Acero Logo" class="h-12 w-auto mr-3 transition-transform duration-300 group-hover:scale-110">
          <span class="text-lg sm:text-xl font-bold bg-gradient-to-r from-accent to-accent-dark bg-clip-text text-transparent">
            Colmillo de Acero
          </span>
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-center space-x-8">
          {navItems.map((item) => {
            const isActive = currentPath === item.href || 
                          (item.href !== '/' && currentPath.startsWith(item.href));
            return (
              <a
                href={item.href}
                class={`px-3 py-2 text-sm font-medium transition-all duration-300 relative group ${
                  isActive 
                    ? 'text-accent font-semibold' 
                    : 'text-white hover:text-accent'
                }`}
              >
                <i class={`fas fa-${item.icon} mr-2`}></i>
                {item.name}
                <span class={`absolute -bottom-1 left-0 h-0.5 transition-all duration-300 ${
                  isActive 
                    ? 'w-full bg-gradient-to-r from-accent to-accent-dark' 
                    : 'w-0 group-hover:w-full bg-accent'
                }`}></span>
              </a>
            );
          })}
        </div>
      </div>
      
      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          class="text-white hover:text-purple-300 focus:outline-none p-2 transition-colors"
          id="mobile-menu-button"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <span class="sr-only">Abrir menú</span>
          <svg
            class="h-8 w-8"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            id="menu-icon"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
          <svg
            class="hidden h-8 w-8"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            id="close-icon"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu, show/hide based on menu state -->
  <div class="hidden md:hidden fixed inset-0 top-20 z-50 bg-black/80 backdrop-blur-sm transition-all duration-300 ease-in-out opacity-0" id="mobile-menu-overlay"></div>
  <div class="hidden md:hidden fixed top-20 left-0 right-0 z-[55] bg-steel-darker/95 backdrop-blur-md shadow-xl transform transition-all duration-300 ease-out -translate-y-full opacity-0" id="mobile-menu">
    <div class="px-4 py-3 space-y-2 bg-steel-darker opacity-90">
      {navItems.map((item) => {
        const isActive = currentPath === item.href || 
                       (item.href !== '/' && currentPath.startsWith(item.href));
        return (
          <a
            href={item.href}
            class={`flex items-center px-4 py-3 rounded-md text-base font-medium transition-colors ${
              isActive 
                ? 'text-white bg-amber-900/50' 
                : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
            }`}
          >
            <i class={`fas fa-${item.icon} w-5 text-center mr-3 text-amber-400`}></i>
            <span>{item.name}</span>
          </a>
        );
      })}
    </div>
  </div>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');
      const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
      const menuIcon = document.getElementById('menu-icon');
      const closeIcon = document.getElementById('close-icon');
      let isOpen = false;

      const toggleMenu = () => {
        isOpen = !isOpen;
        document.body.style.overflow = isOpen ? 'hidden' : '';
        
        if (isOpen) {
          // Mostrar elementos
          mobileMenuOverlay.classList.remove('hidden');
          mobileMenu.classList.remove('hidden');
          
          // Forzar reflow para que la animación funcione
          void mobileMenu.offsetHeight;
          
          // Animar overlay y menú
          mobileMenuOverlay.classList.remove('opacity-0');
          mobileMenu.classList.remove('opacity-0');
          mobileMenu.classList.remove('-translate-y-full');
        } else {
          // Ocultar con animación
          mobileMenuOverlay.classList.add('opacity-0');
          mobileMenu.classList.add('opacity-0');
          mobileMenu.classList.add('-translate-y-full');
          
          // Esperar a que termine la animación antes de ocultar
          setTimeout(() => {
            if (!isOpen) { // Verificar que aún estamos cerrando
              mobileMenuOverlay.classList.add('hidden');
              mobileMenu.classList.add('hidden');
            }
          }, 300);
        }
        
        menuIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('hidden');
        
        // Toggle aria-expanded
        const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true' || false;
        mobileMenuButton.setAttribute('aria-expanded', !expanded);
      };

      mobileMenuButton.addEventListener('click', toggleMenu);
      mobileMenuOverlay.addEventListener('click', toggleMenu);    
    });
  </script>
</nav>

  <style is:inline>
    #mobile-menu-overlay {
      opacity: 0;
      transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      will-change: opacity;
    }
    #mobile-menu {
      transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1), 
                  opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      will-change: transform, opacity;
      transform-origin: top center;
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
    
    /* Suavizar la transición del botón del menú */
    #mobile-menu-button {
      transition: transform 0.2s ease, opacity 0.2s ease;
    }
    #mobile-menu-button:active {
      transform: scale(0.95);
      opacity: 0.8;
    }
  </style>
