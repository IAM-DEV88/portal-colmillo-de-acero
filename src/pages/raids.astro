---
import Layout from '../components/layout/Layout.astro';
import rosterJson from '../data/roster.json';
import { validatePublicNote } from '../utils/rosterUtils';
import type { RaidInfo } from '../types/roster';

// Define the roster item type
interface RosterItem {
  name: string;
  class: string;
  publicNote?: string;
  rank: string;
  officerNote?: string;
  [key: string]: any;
}

// Type the roster data
const rosterData: RosterItem[] = Array.isArray(rosterJson) ? rosterJson : [];

// Define types for our data
interface RaidLeader {
  name: string;
  class: string;
  publicNote: string;
  isRaidLeader: boolean;
  raids: Array<{
    code: string;
    difficultyCode?: string;
    difficulty?: string;
    name: string;
  }>;
  schedules: (string | {
    [key: string]: any;
  })[]; // Updated to handle both string and Schedule types
  hasSchedule: boolean;
  hasRaids: boolean;
  icon: string;
}

// Type for roster data that could be either an array or an object with members
interface RosterData {
  members?: Array<{
    name: string;
    class: string;
    publicNote?: string;
    rank: string;
    [key: string]: any;
  }>;
  [key: string]: any;
}

interface RaidStats {
  raids: Record<string, number>;
  difficulties: Record<string, number>;
  schedules: Record<string, number>;
}

// Format class name for file paths
const formatClassName = (className: string): string => {
  return className
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove accents
    .replace(/\s+/g, '_'); // Replace spaces with underscores
};

// Process roster data to find raid leaders with raids and schedules
const raidLeaders: RaidLeader[] = [];
const potentialLeaders: { name: string; reason: string }[] = [];

// Use the typed roster data
const members = rosterData;

const debugLeaders = ['Stormgrim', 'Voidhammer', 'Vorthrak'];

for (const member of members) {
  try {
    const validation = validatePublicNote(member.publicNote || '', member.name);
    const hasSchedule = (validation.schedules && validation.schedules.length > 0) || false;
    const hasRaids = (validation.raids && validation.raids.length > 0) || false;
    const isRaidLeader =
      validation.isRaidLeader ||
      (hasRaids && hasSchedule) ||
      (hasRaids && member.publicNote?.toLowerCase().includes('rl'));

    if (isRaidLeader || hasRaids || hasSchedule) {
      if (hasRaids && hasSchedule) {
        raidLeaders.push({
          name: member.name,
          class: member.class,
          publicNote: member.publicNote || '',
          isRaidLeader: Boolean(isRaidLeader),
          raids: validation.raids || [],
          schedules: validation.schedules || [],
          hasSchedule,
          hasRaids,
          icon: formatClassName(member.class),
        });
      } else if (hasRaids) {
        potentialLeaders.push({
          name: member.name,
          reason: `Tiene raids pero le falta horario: ${validation.raids?.map((r) => r.code).join(', ')}`,
        });
      } else if (hasSchedule) {
        potentialLeaders.push({
          name: member.name,
          reason: `Tiene horario (${validation.schedules?.join(', ')}) pero no tiene raids definidos`,
        });
      }
    }
  } catch (error) {}
}

// Calculate total raids per week based on schedules
const totalRaidsPerWeek = raidLeaders.reduce((total, leader) => {
  // Count each schedule time as one raid instance
  return total + ((leader.schedules && leader.schedules.length) || 0);
}, 0);

// Get unique raids and difficulties for filters
const allRaids = Array.from(
  new Set(
    raidLeaders.flatMap((member) => (member.raids || []).map((raid) => raid.code).filter(Boolean))
  )
).sort() as string[];

const allDifficulties = Array.from(
  new Set(
    raidLeaders.flatMap((member) =>
      (member.raids || []).map((raid) => raid.difficultyCode).filter(Boolean)
    )
  )
).sort() as string[];

// Statistics
const raidStats = raidLeaders.reduce<RaidStats>(
  (acc, member) => {
    // Track unique raids and difficulties per member
    const memberRaids = new Set<string>();
    const memberDifficulties = new Set<string>();

    member.raids?.forEach((raid: { code: string; difficultyCode?: string }) => {
      // Raid statistics (count each raid code only once per member)
      if (raid.code) {
        memberRaids.add(raid.code);
      }

      // Track unique difficulties per member
      const difficulty = raid.difficultyCode || 'Unknown';
      if (difficulty) {
        memberDifficulties.add(difficulty);
      }
    });

    // Add each unique raid code once for this member
    memberRaids.forEach((raidCode) => {
      acc.raids[raidCode] = (acc.raids[raidCode] || 0) + 1;
    });

    // Add each unique difficulty once for this member
    memberDifficulties.forEach((difficulty) => {
      acc.difficulties[difficulty] = (acc.difficulties[difficulty] || 0) + 1;
    });

    // Schedule statistics (count each schedule time only once per member)
    if (member.schedules) {
      const uniqueTimes = new Set<string>();
      member.schedules.forEach((schedule: string | { [key: string]: any }) => {
        const time = typeof schedule === 'string' ? schedule : schedule.time;
        if (time) {
          uniqueTimes.add(time);
        }
      });
      uniqueTimes.forEach((time) => {
        acc.schedules[time] = (acc.schedules[time] || 0) + 1;
      });
    }

    return acc;
  },
  { raids: {}, difficulties: {}, schedules: {} }
);

// Sort statistics with proper type assertions
const sortedRaidStats = (Object.entries(raidStats.raids) as [string, number][]).sort(
  (a, b) => b[1] - a[1]
);

const sortedDifficultyStats = (Object.entries(raidStats.difficulties) as [string, number][]).sort(
  (a, b) => b[1] - a[1]
);

const sortedScheduleStats = (Object.entries(raidStats.schedules) as [string, number][]).sort(
  (a, b) => b[1] - a[1]
);
---

<Layout title="Líderes de Raid">
  <div class="mx-auto animate-fade-in">
    <!-- Estadísticas Principales -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6 mt-2">
      <!-- Total de Líderes -->
      <div class="bg-gray-900/50 backdrop-blur-sm border border-amber-900/30 rounded-xl p-2 sm:p-3">
        <div class="flex justify-between items-center">
          <h3 class="text-text-muted/90 text-[10px] sm:text-base font-bold text-amber-300">Líderes de Raid</h3>
          <p class="text-[22px] sm:text-2xl font-bold text-amber-200/80">{raidLeaders.length}</p>
        </div>
        <div class="text-center mt-1">
          <p class="text-[7px] sm:text-[10px] text-amber-100/90 font-bold">ACTIVOS</p>
        </div>
      </div>

      <!-- Total de Raids -->
      <div class="bg-gray-900/50 backdrop-blur-sm border border-amber-900/30 rounded-xl p-2 sm:p-3">
        <div class="flex justify-between items-center">
          <h3 class="text-text-muted/90 text-[10px] sm:text-base font-bold text-amber-300">Raid Semanales</h3>
          <p class="text-[22px] sm:text-2xl font-bold text-amber-200/80">{totalRaidsPerWeek}</p>
        </div>
        <div class="text-center mt-1">
          <p class="text-[7px] sm:text-[10px] text-amber-100/90 font-bold">TOTAL</p>
        </div>
      </div>

      <!-- Dificultades Únicas -->
      <div class="bg-gray-900/50 backdrop-blur-sm border border-amber-900/30 rounded-xl p-2 sm:p-3">
        <div class="flex justify-between items-center">
          <h3 class="text-text-muted/90 text-[10px] sm:text-base font-bold text-amber-300">Dificultades</h3>
          <p class="text-[22px] sm:text-2xl font-bold text-amber-200/80">{Object.keys(raidStats.difficulties).length}</p>
        </div>
        <div class="text-center mt-1">
          <p class="text-[7px] sm:text-[10px] text-amber-100/90 font-bold">ÚNICAS</p>
        </div>
      </div>

      <!-- Bandas Únicas -->
      <div class="bg-gray-900/50 backdrop-blur-sm border border-amber-900/30 rounded-xl p-2 sm:p-3">
        <div class="flex justify-between items-center">
          <h3 class="text-text-muted/90 text-[10px] sm:text-base font-bold text-amber-300">Bandas</h3>
          <p class="text-[22px] sm:text-2xl font-bold text-amber-200/80">{allRaids.length}</p>
        </div>
        <div class="text-center mt-1">
          <p class="text-[7px] sm:text-[10px] text-amber-100/90 font-bold">ÚNICAS</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Tabla de Líderes de Raid -->
  <div class="bg-gray-900/50 backdrop-blur-sm border border-amber-900/30 rounded-xl p-2 sm:p-3 mt-6 animate-fade-in" style="animation-delay: 0.2s;">
    <div class="overflow-x-auto rounded-t-xl">
      <table class="min-w-full divide-y divide-accent bg-gray-900/50 backdrop-blur-sm">
        <thead class="bg-gradient-to-r from-amber-900/50 to-amber-800/30">
          <tr>
            <th data-column="name" class="text-center text-xs font-semibold text-amber-300/90 uppercase tracking-wider cursor-pointer hover:text-amber-200 transition-colors" data-sort="name">
              <div class="flex items-center justify-center">
                <span class="py-2">Líder de Raid</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="ml-1 h-3.5 w-3.5 opacity-70" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                </svg>
              </div>
            </th>
          </tr>
        </thead>
        <tbody class="divide-y divide-accent">
          {
            raidLeaders.map((leader, index) => {
              // Get unique difficulties, ensure valid format (10N, 25N, 10H, 25H)
              const difficulties = [
                ...new Set(
                  leader.raids
                    .filter(
                      (raid): raid is RaidInfo & { difficultyCode: string } =>
                        !!raid.difficultyCode && /^\d+[NH]$/i.test(raid.difficultyCode)
                    )
                    .map((raid) => raid.difficultyCode.toUpperCase())
                    .sort() // Ordenar por dificultad
                ),
              ];

              return (
                <tr
                  class="hover:bg-steel-dark transition-colors duration-200 hover:border-accent"
                  data-name={leader.name.toLowerCase()}
                  data-raids={leader.raids
                    .map((r) => `${r.code}${r.difficultyCode}`)
                    .join(' ')
                    .toLowerCase()}
                >
                  <td class="px-2 md:px-6 py-4">
                    <div class="flex items-start">
                      <div class="flex-shrink-0 h-10 w-10 rounded-full bg-steel-darker/80 border border-accent/20 flex items-center justify-center shadow-inner overflow-hidden mr-3">
                        <img
                          src={`/images/avatars/class_${leader.class}.jpg`}
                          alt={leader.class}
                          class="h-8 w-8 rounded-full object-cover"
                          onerror="this.onerror=null; this.src='/images/class_default.jpg'"
                        />
                      </div>
                      <div class="min-w-0 flex-1">
                        <div class="flex flex-col">
                          <div
                            class="text-xs"
                            style={`color: #${
                              leader.class === 'Guerrero'
                                ? 'C79C6E'
                                : leader.class === 'Paladín'
                                  ? 'F58CBA'
                                  : leader.class === 'Cazador'
                                    ? 'ABD473'
                                    : leader.class === 'Pícaro'
                                      ? 'FFF569'
                                      : leader.class === 'Sacerdote'
                                        ? 'FFFFFF'
                                        : leader.class === 'Caballero de la Muerte'
                                          ? 'C41F3B'
                                          : leader.class === 'Chamán'
                                            ? '0070DE'
                                            : leader.class === 'Mago'
                                              ? '69CCF0'
                                              : leader.class === 'Brujo'
                                                ? '9482C9'
                                                : leader.class === 'Monje'
                                                  ? '00FF96'
                                                  : leader.class === 'Druida'
                                                    ? 'FF7D0A'
                                                    : leader.class === 'Cazador de demonios'
                                                      ? 'A330C9'
                                                      : '9D9D9D' // Color por defecto
                            }`}
                          >
                            {leader.class}
                          </div>
                          <div class="text-sm font-medium text-white mr-2">{leader.name}</div>
                          
                        </div>
                      </div>
                    </div>
                          <div class="mt-1.5 text-xs text-text-muted/90 flex flex-wrap gap-1 px-2 py-1.5 rounded-md bg-gray-900/30 border border-accent self-start">
                            {/* Raids */} Arma 
                            {Array.from(new Set(leader.raids.map((r) => r.code))).map(
                              (raidCode: string, index, array) => (
                                <>
                                  <span class="font-medium text-accent">{raidCode}</span>
                                  {index < array.length - 1 && <span class="text-text-muted/60"> o </span>}
                                </>
                              )
                            )}

                            <span class="text-text-muted/60">•</span>

                            {/* Dificultades */}
                            {difficulties.length > 0 ? (
                              <>
                                {difficulties.map((diff, index) => {
                                  const difficultyColors = {
                                    '10N': 'text-blue-400',
                                    '25N': 'text-purple-400',
                                    '25H': 'text-red-400',
                                    '10H': 'text-yellow-400',
                                  } as const;
                                  type DifficultyKey = keyof typeof difficultyColors;
                                  const color =
                                    difficultyColors[diff as DifficultyKey] || 'text-text-muted';
                                  return (
                                    <>
                                      <span class={`font-medium ${color}`}>{diff}</span>
                                      {index < difficulties.length - 1 && <span class="text-text-muted/60"> o </span>}
                                    </>
                                  );
                                })}
                              </>
                            ) : (
                              <span class="text-text-muted/70">Sin dificultad</span>
                            )}

                            <span class="text-text-muted/60">•</span>

                            {/* Horarios */}
                            {leader.schedules?.length > 0 ? (
                              <>
                                <span class="flex items-center">
                                  <svg
                                    class="w-3 h-3 mr-1 text-green-400"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                      stroke-width="2"
                                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                                    />
                                  </svg>
                                  {leader.schedules.map((schedule: string | { [key: string]: any }, i: number) => {
                                    const time = typeof schedule === 'string' ? schedule : schedule.time;
                                    const formattedTime = time
                                      ?.toString()
                                      .replace(/X$/i, 'h')
                                      .replace(/(\d{2})(\d{2})X/i, '$1:$2h') || '';
                                    return (
                                      <span>
                                        {i > 0 && <span class="text-text-muted/60">, </span>}
                                        <span class="text-green-300 font-medium">
                                         A las {formattedTime} hora server
                                        </span>
                                      </span>
                                    );
                                  })}
                                </span>
                              </>
                            ) : (
                              <span class="text-text-muted/70">Sin horario</span>
                            )}
                          </div>
                  </td>
                </tr>
              );
            })
          }
        </tbody>
      </table>
    </div>

    <!-- Paginación -->
    <div
      class="px-2 md:px-6 py-4 bg-gray-900/50 backdrop-blur-sm border-t border-amber-900/30 flex flex-col sm:flex-row items-center justify-between gap-4"
    >
      <div class="text-sm text-text-muted/70">
        Página <span id="currentPage" class="font-medium text-white">1</span> de
        <span id="totalPages" class="font-medium text-white">1</span>
        <span class="hidden sm:inline"
          >(<span id="resultsCount" class="font-medium text-white">0</span> líderes)</span
        >
      </div>
      <div class="flex items-center space-x-1">
        <button
          id="prevPage"
          class="px-2 py-1 rounded-md border border-accent/30 bg-steel-darker/50 text-text-muted hover:bg-accent/10 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors"
          title="Página anterior"
          disabled
        >
          &lt;
        </button>
        <div id="pageNumbers" class="flex items-center space-x-1">
          <!-- Page numbers will be inserted here by JavaScript -->
        </div>
        <button
          id="nextPage"
          class="px-2 py-1 rounded-md border border-accent/30 bg-steel-darker/50 text-text-muted hover:bg-accent/10 hover:text-white disabled:opacity-30 disabled:cursor-not-allowed transition-colors"
          title="Página siguiente"
        >
          &gt;
        </button>
      </div>
    </div>

    <!-- Filtros -->
    <div class="p-6 bg-gray-900/50 backdrop-blur-sm border border-amber-900/30">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Búsqueda por Nombre -->
        <div>
          <label for="searchName" class="block text-sm font-medium text-text-muted/80 mb-2"
            >Buscar por Nombre</label
          >
          <input
            type="text"
            id="searchName"
            placeholder="Escribe un nombre..."
            class="w-full bg-transparent border border-accent rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-accent/50 focus:border-transparent placeholder-text-muted/50 transition-all duration-200"
          />
        </div>

        <!-- Filtro por Raid -->
        <div>
          <label for="filterRaid" class="block text-sm font-medium text-text-muted/80 mb-2"
            >Filtrar por Raid</label
          >
          <select
            id="filterRaid"
            class="w-full bg-transparent border border-accent rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-accent/50 focus:border-transparent placeholder-text-muted/50 transition-all duration-200 appearance-none"
          >
            <option value="" selected>Todas las Raids</option>
            {
              allRaids.map((raid) => (
                <option value={raid.toLowerCase()} class="bg-steel-darker text-white">
                  {raid}
                </option>
              ))
            }
          </select>
        </div>

        <!-- Filtro por Dificultad -->
        <div>
          <label for="filterDifficulty" class="block text-sm font-medium text-text-muted/80 mb-2"
            >Filtrar por Dificultad</label
          >
          <select
            id="filterDifficulty"
            class="w-full bg-transparent border border-accent rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-accent/50 focus:border-transparent placeholder-text-muted/50 transition-all duration-200 appearance-none"
          >
            <option value="" selected>Todas las Dificultades</option>
            {
              allDifficulties.map((difficulty) => (
                <option value={difficulty.toLowerCase()} class="bg-steel-darker text-white">
                  {difficulty}
                </option>
              ))
            }
          </select>
        </div>
      </div>
    </div>
  </div>

  <!-- Sección de estadísticas -->
  <div class="mt-8 bg-gray-900/50 backdrop-blur-sm border border-amber-900/30 rounded-xl p-4 sm:p-6">
    <h2 class="text-xl font-semibold mb-6 text-center text-amber-200/90 uppercase tracking-wider">
      Estadísticas de Líderes de Raid
    </h2>
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Bandas Populares -->
      <div class="bg-gray-900/70 backdrop-blur-sm border border-amber-900/30 rounded-xl p-4 sm:p-6 hover:border-amber-800/50 transition-colors">
        <h3 class="text-amber-300/90 text-lg font-medium mb-4 text-center uppercase tracking-wider">
          Bandas
        </h3>
        <div class="space-y-3">
          {
            sortedRaidStats.map(([raid, count]) => {
              const percentage = Math.round((count / raidLeaders.length) * 100);
              return (
                <div class="space-y-1.5">
                  <div class="flex items-center justify-between text-xs">
                    <span class="text-amber-100/80">{raid}</span>
                    <div class="flex items-center">
                      <span class="text-white font-semibold mr-1">{count}</span>
                      <span class="text-amber-100/60 text-[11px]">({percentage}%)</span>
                    </div>
                  </div>
                  <div class="w-full bg-amber-900/30 rounded-full h-1.5 overflow-hidden">
                    <div
                      class="h-full rounded-full bg-gradient-to-r from-amber-500 to-amber-400 transition-all duration-500 ease-out"
                      style={{ width: `${percentage}%` }}
                    />
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>

      <!-- Dificultades -->
      <div class="bg-gray-900/70 backdrop-blur-sm border border-amber-900/30 rounded-xl p-4 sm:p-6 hover:border-amber-800/50 transition-colors">
        <h3 class="text-amber-300/90 text-lg font-medium mb-4 text-center uppercase tracking-wider">
          Dificultades
        </h3>
        <div class="space-y-3">
          {
            sortedDifficultyStats.map(([difficulty, count]) => {
              const difficultyColors = {
                '10N': { from: 'from-blue-400', to: 'to-blue-600' },
                '25N': { from: 'from-purple-400', to: 'to-purple-600' },
                '10H': { from: 'from-yellow-400', to: 'to-yellow-600' },
                '25H': { from: 'from-red-400', to: 'to-red-600' },
                'Unknown': { from: 'from-gray-400', to: 'to-gray-600' }
              };
              
              const colors = difficultyColors[difficulty as keyof typeof difficultyColors] || 
                            { from: 'from-amber-400', to: 'to-amber-600' };
              
              const percentage = Math.round((count / raidLeaders.length) * 100);
              
              return (
                <div class="space-y-1.5">
                  <div class="flex items-center justify-between text-xs">
                    <span class="text-amber-100/80">{difficulty}</span>
                    <div class="flex items-center">
                      <span class="text-white font-semibold mr-1">{count}</span>
                      <span class="text-amber-100/60 text-[11px]">({percentage}%)</span>
                    </div>
                  </div>
                  <div class="w-full bg-amber-900/30 rounded-full h-1.5 overflow-hidden">
                    <div
                      class={`h-full rounded-full bg-gradient-to-r ${colors.from} ${colors.to} transition-all duration-500 ease-out`}
                      style={{ width: `${percentage}%` }}
                    />
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>

      <!-- Horarios Populares -->
      <div class="bg-gray-900/70 backdrop-blur-sm border border-amber-900/30 rounded-xl p-4 sm:p-6 hover:border-amber-800/50 transition-colors">
        <h3 class="text-amber-300/90 text-lg font-medium mb-4 text-center uppercase tracking-wider">
          Horarios
        </h3>
        <div class="space-y-3">
          {
            sortedScheduleStats.map(([time, count]) => {
              const percentage = Math.round((count / raidLeaders.length) * 100);
              return (
                <div class="space-y-1.5">
                  <div class="flex items-center justify-between text-xs">
                    <span class="text-amber-100/80">{time}</span>
                    <div class="flex items-center">
                      <span class="text-white font-semibold mr-1">{count}</span>
                      <span class="text-amber-100/60 text-[11px]">({percentage}%)</span>
                    </div>
                  </div>
                  <div class="w-full bg-amber-900/30 rounded-full h-1.5 overflow-hidden">
                    <div
                      class="h-full rounded-full bg-gradient-to-r from-green-400 to-green-600 transition-all duration-500 ease-out"
                      style={{ width: `${percentage}%` }}
                    />
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Obtener referencias a los elementos del DOM
    const searchName = document.getElementById('searchName') as HTMLInputElement;
    const filterRaid = document.getElementById('filterRaid') as HTMLSelectElement;
    const filterDifficulty = document.getElementById('filterDifficulty') as HTMLSelectElement;
    const resultsCount = document.getElementById('resultsCount') as HTMLSpanElement;
    const currentPageSpan = document.getElementById('currentPage') as HTMLSpanElement;
    const totalPagesSpan = document.getElementById('totalPages') as HTMLSpanElement;
    const prevPageBtn = document.getElementById('prevPage') as HTMLButtonElement;
    const nextPageBtn = document.getElementById('nextPage') as HTMLButtonElement;
    const pageNumbersContainer = document.getElementById('pageNumbers') as HTMLDivElement;

    // Obtener todas las filas de la tabla
    const allRows = Array.from(document.querySelectorAll('tbody tr'));

    // Estado de la paginación
    let currentPage = 1;
    const rowsPerPage = 5; // 5 filas por página
    let filteredRows = [...allRows];
    let totalPages = 1;

    // Función para actualizar los números de página
    const updatePageNumbers = () => {
      pageNumbersContainer.innerHTML = '';

      // Mostrar máximo 5 números de página a la vez
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, startPage + 4);

      // Ajustar si estamos cerca del final
      if (endPage - startPage < 4 && startPage > 1) {
        startPage = Math.max(1, endPage - 4);
      }

      // Botón para la primera página si es necesario
      if (startPage > 1) {
        const firstPageBtn = document.createElement('button');
        firstPageBtn.textContent = '1';
        firstPageBtn.className = `px-2 py-1 rounded-md ${1 === currentPage ? 'bg-accent text-white' : 'bg-steel-darker/50 text-text-muted hover:bg-accent/10'}`;
        firstPageBtn.addEventListener('click', () => goToPage(1));
        pageNumbersContainer.appendChild(firstPageBtn);

        if (startPage > 2) {
          const ellipsis = document.createElement('span');
          ellipsis.textContent = '...';
          ellipsis.className = 'px-1 text-text-muted/50';
          pageNumbersContainer.appendChild(ellipsis);
        }
      }

      // Números de página
      for (let i = startPage; i <= endPage; i++) {
        const pageBtn = document.createElement('button');
        pageBtn.textContent = i.toString();
        pageBtn.className = `px-2 py-1 rounded-md ${i === currentPage ? 'bg-accent text-white' : 'bg-steel-darker/50 text-text-muted hover:bg-accent/10'}`;
        pageBtn.addEventListener('click', () => goToPage(i));
        pageNumbersContainer.appendChild(pageBtn);
      }

      // Botón para la última página si es necesario
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const ellipsis = document.createElement('span');
          ellipsis.textContent = '...';
          ellipsis.className = 'px-1 text-text-muted/50';
          pageNumbersContainer.appendChild(ellipsis);
        }

        const lastPageBtn = document.createElement('button');
        lastPageBtn.textContent = totalPages.toString();
        lastPageBtn.className = `px-2 py-1 rounded-md ${totalPages === currentPage ? 'bg-accent text-white' : 'bg-steel-darker/50 text-text-muted hover:bg-accent/10'}`;
        lastPageBtn.addEventListener('click', () => goToPage(totalPages));
        pageNumbersContainer.appendChild(lastPageBtn);
      }
    };

    // Función para ir a una página específica
    const goToPage = (page: number) => {
      if (page >= 1 && page <= totalPages) {
        currentPage = page;
        updateTable();
      }
    };

    // Función para actualizar la visualización de la tabla
    const updateTable = () => {
      // Calcular índices para la paginación
      const startIndex = (currentPage - 1) * rowsPerPage;
      const endIndex = startIndex + rowsPerPage;
      const rowsToShow = filteredRows.slice(startIndex, endIndex);

      // Ocultar todas las filas primero
      allRows.forEach((row) => {
        row.style.display = 'none';
      });

      // Mostrar solo las filas de la página actual
      rowsToShow.forEach((row) => {
        if (row) row.style.display = '';
      });

      // Actualizar contadores y controles de paginación
      totalPages = Math.max(1, Math.ceil(filteredRows.length / rowsPerPage));
      resultsCount.textContent = filteredRows.length.toString();
      totalPagesSpan.textContent = totalPages.toString();

      // Asegurarse de que la página actual no sea mayor que el número total de páginas
      if (currentPage > totalPages && totalPages > 0) {
        currentPage = totalPages;
        updateTable();
        return;
      }

      // Actualizar estado de los botones de paginación
      prevPageBtn.disabled = currentPage === 1;
      nextPageBtn.disabled = currentPage >= totalPages || totalPages === 0;

      currentPageSpan.textContent = currentPage.toString();

      // Actualizar los números de página
      updatePageNumbers();
    };

    // Función para aplicar los filtros
    const applyFilters = () => {
      const nameQuery = searchName.value.trim().toLowerCase();
      const raidQuery = filterRaid.value.toLowerCase();
      const difficultyQuery = filterDifficulty.value.toLowerCase();

      filteredRows = allRows.filter((row) => {
        const name = row.querySelector('td:first-child .text-sm')?.textContent?.toLowerCase() || '';
        const raids = Array.from(row.querySelectorAll('td:nth-child(2) span')).map(
          (span) => span.getAttribute('data-raid') || ''
        );
        const difficulties = Array.from(row.querySelectorAll('td:nth-child(3) span')).map(
          (span) => span.textContent?.toLowerCase() || ''
        );

        // Aplicar filtros
        const nameMatch = name.includes(nameQuery);
        const raidMatch = !raidQuery || raids.some((raid) => raid.includes(raidQuery));
        const difficultyMatch =
          !difficultyQuery || difficulties.some((diff) => diff.includes(difficultyQuery));

        return nameMatch && raidMatch && difficultyMatch;
      });

      // Resetear a la primera página al aplicar nuevos filtros
      currentPage = 1;
      updateTable();
    };

    // Manejadores de eventos
    searchName.addEventListener('input', applyFilters);
    filterRaid.addEventListener('change', applyFilters);
    filterDifficulty.addEventListener('change', applyFilters);

    prevPageBtn.addEventListener('click', () => goToPage(currentPage - 1));
    nextPageBtn.addEventListener('click', () => goToPage(currentPage + 1));

    // Inicializar la tabla
    updateTable();
  });
</script>

<style>
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  ::-webkit-scrollbar-track {
    background: #2d3748;
  }
  ::-webkit-scrollbar-thumb {
    background: #4a5568;
    border-radius: 4px;
  }
  ::-webkit-scrollbar-thumb:hover {
    background: #718096;
  }
</style>
