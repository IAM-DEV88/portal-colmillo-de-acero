---
import Layout from '../components/layout/Layout.astro';
import { getVoteStats } from '../lib/voting';
import rosterData from '../data/roster.json';

interface RosterCharacter {
  name: string;
  class: string;
  rank: string;
  publicNote: string;
  officerNote: string;
}

// Obtener parámetros de la URL
const searchParams = Astro.url.searchParams;
const success = searchParams.get('success') === 'true';
const error = searchParams.get('error');

// Obtener estadísticas de votos
interface VoteStat {
  character: string;
  count: number;
}

let voteStats: VoteStat[] = [];
try {
  const stats = await getVoteStats();
  if (stats.success) {
    voteStats = stats.data || [];
  } else {
    console.error('Error al cargar estadísticas:', stats.error);
  }
} catch (err) {
  console.error('Error al cargar estadísticas:', err);
}
---

<Layout title="Votar">
  <main class="min-h-screen w-full py-8 px-4 sm:px-6 lg:px-8">
    <!-- Top Banner Ad -->
    <div
      class="max-w-4xl mx-auto mb-8 bg-gray-900/50 border border-amber-900/30 rounded-lg overflow-hidden"
    >
      <div
        class="w-full h-24 bg-gradient-to-r from-amber-900/20 to-amber-800/10 flex items-center justify-center"
      >
        <p class="text-amber-500/60 text-sm font-medium">ESPACIO PUBLICITARIO</p>
      </div>
    </div>

    <div class="max-w-4xl mx-auto grid grid-cols-1 lg:grid-cols-6 gap-6">
      <!-- Left Sidebar Ad -->
      <div class="">
        <div class="sticky top-24">
          <div
            class="w-full h-[600px] bg-gray-900/50 border border-amber-900/30 rounded-lg overflow-hidden"
          >
            <div
              class="w-full h-full bg-gradient-to-b from-amber-900/10 to-transparent flex items-center justify-center"
            >
              <p class="text-amber-500/60 text-sm font-medium -rotate-90 whitespace-nowrap">
                PUBLICIDAD
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="lg:col-span-4">
        <div
          class="bg-gray-900/60 backdrop-blur-sm border border-amber-900/30 rounded-xl p-8 shadow-2xl shadow-amber-500/5"
        >
          <!-- Header -->
          <div class="text-center mb-8">
            <h1
              class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-400 via-amber-300 to-amber-500 font-title tracking-wider mb-2"
            >
              APOYAR A LA HERMANDAD
            </h1>
            <div
              class="w-24 h-0.5 bg-gradient-to-r from-amber-900/0 via-amber-500/80 to-amber-900/0 mx-auto my-4"
            >
            </div>
            <p class="text-gray-300 mt-4">
              Tu voto nos ayuda a crecer. ¡Puedes reclamar oro por cada voto!
            </p>
          </div>

          {error && (
            <div class="mb-6 p-4 rounded-lg bg-red-900/30 border border-red-800/50 text-red-100">
              <i class="fas fa-exclamation-circle text-2xl mb-2 text-red-400"></i>
              <p class="font-medium">Error</p>
              <p class="text-sm mt-1">{error}</p>
            </div>
          )}

          {success && (
            <div class="mb-6 p-4 rounded-lg bg-green-900/30 border border-green-800/50 text-green-100">
              <i class="fas fa-check-circle text-2xl mb-2 text-green-400"></i>
              <p class="font-medium">¡Voto registrado con éxito!</p>
              <p class="text-sm mt-1">Gracias por tu apoyo. ¡Sigue acumulando oro!</p>
            </div>
          )}

          <!-- Voting Form -->
          <form id="voteForm" class="space-y-6">
            <!-- Character Name Input -->
            <div>
              <label for="characterName" class="block text-sm font-medium text-amber-100 mb-2">
                Nombre del Personaje
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="characterName"
                  name="characterName"
                  class="w-full px-4 py-2 bg-gray-800 border border-amber-600 rounded-md text-amber-100 focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                  placeholder="Escribe el nombre del personaje"
                  list="characterList"
                  required
                />
                <datalist id="characterList">
                  {(rosterData as RosterCharacter[]).map((char: RosterCharacter) => (
                    <option value={char.name} />
                  ))}
                </datalist>
              </div>
            </div>

            <!-- Submit Button -->
            <div>
              <button
                type="submit"
                id="voteButton"
                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-amber-900 bg-amber-500 hover:bg-amber-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 transition-colors duration-200"
              >
                Votar
              </button>
            </div>
          </form>

          <!-- Vote Statistics -->
          <div class="mt-8">
            <h3 class="text-lg font-medium text-amber-100 mb-4">Ranking de votos</h3>
            {voteStats.length > 0 ? (
              <div class="bg-gray-900/50 border border-amber-900/30 rounded-lg overflow-hidden">
                <table class="min-w-full divide-y divide-amber-900/30">
                  <thead class="bg-amber-900/20">
                    <tr>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-amber-400 uppercase tracking-wider">Posición</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-amber-400 uppercase tracking-wider">Personaje</th>
                      <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-amber-400 uppercase tracking-wider">Votos</th>
                    </tr>
                  </thead>
                  <tbody class="bg-gray-900/30 divide-y divide-amber-900/20">
                    {voteStats.map((stat, index) => (
                      <tr class="hover:bg-amber-900/10 transition-colors">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-amber-100">
                          {index + 1}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-amber-200">
                          {stat.character}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm text-amber-300">
                          {stat.count}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <p class="text-amber-100/70 text-center py-4">Aún no hay votos registrados. ¡Sé el primero en votar!</p>
            )}
          </div>
          </div>

          <!-- Vote Info -->
          <div class="mt-8 pt-6 border-t border-gray-800">
            <h3 class="text-sm font-medium text-amber-100 mb-3">¿CÓMO FUNCIONA?</h3>
            <ul class="space-y-3">
              <li class="flex items-start">
                <div class="flex-shrink-0 h-5 w-5 text-amber-500 mr-2">
                  <i class="fas fa-check-circle"></i>
                </div>
                <span class="text-sm text-gray-300">Vota una vez cada 24 horas</span>
              </li>
              <li class="flex items-start">
                <div class="flex-shrink-0 h-5 w-5 text-amber-500 mr-2">
                  <i class="fas fa-check-circle"></i>
                </div>
                <span class="text-sm text-gray-300">Tu personaje debe estar en el roster</span>
              </li>
              <li class="flex items-start">
                <div class="flex-shrink-0 h-5 w-5 text-amber-500 mr-2">
                  <i class="fas fa-check-circle"></i>
                </div>
                <span class="text-sm text-gray-300">Cada voto es redimible por oro</span>
              </li>
            </ul>
          </div>
        </div>
      </div>

        <!-- Right Sidebar Ad -->
        <div class="">
          <div class="sticky top-24">
            <div
              class="w-full h-[600px] bg-gray-900/50 border border-amber-900/30 rounded-lg overflow-hidden"
            >
              <div
                class="w-full h-full bg-gradient-to-b from-amber-900/10 to-transparent flex items-center justify-center"
              >
                <p class="text-amber-500/60 text-sm font-medium -rotate-90 whitespace-nowrap">
                  PUBLICIDAD
                </p>
              </div>
            </div>
          </div>
        </div>

      </div>

      <!-- Bottom Banner Ad -->
      <div
        class="max-w-4xl mx-auto mt-8 bg-gray-900/50 border border-amber-900/30 rounded-lg overflow-hidden"
      >
        <div
          class="w-full h-24 bg-gradient-to-r from-amber-900/20 to-amber-800/10 flex items-center justify-center"
        >
          <p class="text-amber-500/60 text-sm font-medium">
            ESPACIO PUBLICITARIO - GRACIAS POR TU APOYO
          </p>
        </div>
      </div>
    </div>

    <style is:global>
      /* Animation for vote button */
      @keyframes pulse {
        0%,
        100% {
          transform: scale(1);
          box-shadow: 0 0 0 0 rgba(245, 158, 11, 0.4);
        }
        50% {
          transform: scale(1.02);
          box-shadow: 0 0 0 8px rgba(245, 158, 11, 0);
        }
      }

      .animate-pulse-slow {
        animation: pulse 3s infinite;
      }
    </style>

    <script>
      // Esperar a que el DOM esté completamente cargado
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('voteForm') as HTMLFormElement | null;
        const button = document.getElementById('voteButton') as HTMLButtonElement | null;
        const characterInput = document.getElementById('characterName') as HTMLInputElement | null;
        
        if (!form || !button || !characterInput) {
          console.error('No se encontraron los elementos necesarios');
          return;
        }
        
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const characterName = characterInput.value.trim();
          if (!characterName) return;
          
          const originalButtonText = button.innerHTML;
          
          try {
            // Deshabilitar el botón
            button.disabled = true;
            button.innerHTML = 'Procesando...';
            button.classList.add('opacity-75');
            
            // Enviar el voto
            try {
              const response = await fetch('/api/vote', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ characterName })
              });
              
              // Verificar si la respuesta es exitosa
              if (!response.ok) {
                throw new Error('Error en la respuesta del servidor');
              }
              
              const result = await response.json();
              
              // Usar replace en lugar de href para evitar problemas con el historial
              if (result.success) {
                window.location.replace('/voto?success=true');
              } else {
                window.location.replace(`/voto?error=${encodeURIComponent(result.error || 'Error al registrar el voto')}`);
              }
            } catch (fetchError) {
              console.error('Error al enviar el voto:', fetchError);
              window.location.replace('/voto?error=Error+al+procesar+el+voto');
            }
          } catch (error) {
            console.error('Error:', error);
            window.location.href = '/voto?error=Error+al+procesar+el+voto';
          } finally {
            // Restaurar el botón
            button.disabled = false;
            button.innerHTML = originalButtonText;
            button.classList.remove('opacity-75');
          }
        });
      });
    </script>
  </main>
</Layout>
