---
import Layout from '../../components/layout/Layout.astro';

// Importar iconos de clases
const classIcons = {
  'Death Knight': 'classicon_deathknight',
  'Demon Hunter': 'classicon_demonhunter',
  Druid: 'classicon_druid',
  Evoker: 'classicon_evoker',
  Hunter: 'classicon_hunter',
  Mage: 'classicon_mage',
  Monk: 'classicon_monk',
  Paladin: 'classicon_paladin',
  Priest: 'classicon_priest',
  Rogue: 'classicon_rogue',
  Shaman: 'classicon_shaman',
  Warlock: 'classicon_warlock',
  Warrior: 'classicon_warrior',
};
---

<Layout title="Nota Pública">
  <div class="container mx-auto px-4 py-8 max-w-4xl animate-fade-in">
    <!-- Header -->
    <header
      class="text-center mb-10 bg-gradient-to-r from-amber-900/30 to-amber-800/20 backdrop-blur-sm border border-amber-900/30 rounded-xl p-6 shadow-lg"
    >
      <h1 class="text-3xl font-bold text-amber-200 mb-3 tracking-wide">Guía de Código de Nota</h1>
      <p class="text-amber-100/80 max-w-2xl mx-auto">
        Aprende a formatear correctamente tu código de nota para mejorar la organización del gremio y
        asegurar tu participación en los eventos.
      </p>
    </header>

    <!-- Main Content -->

    <!-- Sección del Validador -->
    <section
      class="bg-gradient-to-br from-steel-darker/90 to-steel-dark/90 backdrop-blur-sm p-6 rounded-xl border border-amber-900/30 shadow-lg mb-8 hover:border-amber-800/50 transition-colors duration-200"
    >
      <div class="flex items-center mb-6">
        <div class="bg-amber-900/50 p-2 rounded-lg mr-3">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6 text-amber-300"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
            ></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-amber-200">Validador de Código</h2>
      </div>

      <div class="space-y-4">
        <div class="relative">
          <div class="relative">
            <input
              type="text"
              id="notaInput"
              autocomplete="off"
              placeholder="Pega tu código aquí..."
              class="w-full bg-amber-900/50 border border-amber-900/30 rounded-lg px-4 py-3 text-white placeholder-amber-100/50 focus:outline-none focus:ring-2 focus:ring-amber-500/50 focus:border-transparent transition-all duration-200"
            />
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <svg
                class="h-5 w-5 text-amber-500/70"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
          <div id="notaError" class="hidden text-red-400 text-sm mt-2 pl-1"></div>
        </div>

        <div id="notaResult" class="hidden">
          <div class="p-4 bg-amber-900/10 rounded-lg border border-amber-900/30">
            <h3 class="font-semibold text-amber-200 mb-4 flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2 text-amber-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                ></path>
              </svg>
              Vista previa
            </h3>
            <div class="space-y-4">
              <div>
                <div class="text-sm font-medium text-amber-200 mb-2">Bloque de Personaje</div>
                <div id="previewPersonaje" class="flex flex-wrap gap-1.5"></div>
                <div id="detallesPersonaje" class="text-xs text-amber-100/60 mt-2"></div>
              </div>
              <div class="pt-3 border-t border-amber-900/30">
                <div class="text-sm font-medium text-amber-200 mb-2">Bloque de Evento</div>
                <div id="previewEvento" class="flex flex-wrap gap-1.5"></div>
                <div id="detallesEvento" class="text-xs text-amber-100/60 mt-2"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <script>
        // Constantes de configuración
        const ROLES = {
          'T': 'Tank',
          'H': 'Healer',
          'D': 'DPS'
        };

        const STATUS = {
          'M': 'Main',
          'A': 'Alt'
        };

        const RAID_NAMES = {
          'ICC': 'Ciudadela de la Corona de Hielo',
          'TOC': 'Prueba del Cruzado',
          'ULD': 'Ulduar',
          'NAX': 'Naxxramas',
          'OS': 'El Oculus de los Creadores',
          'VOA': 'Cámara de Archavon',
          'EOE': 'El Ojo de la Eternidad',
          'ONY': 'Guarida de Onyxia',
          'RS': 'Cámara de los Aspectos'
        };

        const DAY_NAMES = {
          'L': 'Lun',
          'M': 'Mar',
          'X': 'Mié',
          'J': 'Jue',
          'V': 'Vie',
          'S': 'Sáb',
          'D': 'Dom',
          'W': 'Mié' // Alias para X
        };

        const DIFFICULTY_NAMES = {
          '10N': '10 Normal',
          '10H': '10 Heroico',
          '25N': '25 Normal',
          '25H': '25 Heroico'
        };

        const PROFESSIONS = {
          'AL': 'Alquimia',
          'HB': 'Herboristería',
          'TL': 'Sastrería',
          'EN': 'Encantamiento',
          'EG': 'Ingeniería',
          'JC': 'Joyería',
          'BS': 'Herrería',
          'IN': 'Inscripción',
          'MN': 'Minería',
          'SK': 'Desuello',
          'LW': 'Peletería'
        };

        // Mapeo de códigos de banda a una letra
        const BANDA_CODES = {
          'i': 'ICC',
          't': 'TOC',
          'u': 'ULD',
          'n': 'NAX',
          'o': 'OS',
          'v': 'VOA',
          'e': 'EOE',
          'y': 'ONY',
          'r': 'RS',
          'a': 'VOA' // Alias para VOA
        };

        // Elementos del DOM con tipos TypeScript
        const notaInput = document.getElementById('notaInput') as HTMLInputElement | null;
        const notaError = document.getElementById('notaError') as HTMLDivElement | null;
        const notaResult = document.getElementById('notaResult') as HTMLDivElement | null;
        const detallesPersonaje = document.getElementById(
          'detallesPersonaje'
        ) as HTMLDivElement | null;
        const detallesEvento = document.getElementById('detallesEvento') as HTMLDivElement | null;

        // Expresiones regulares mejoradas
        const regexPersonaje = {
          mainRole: /^[MA]/i,
          spec: /[THDB]+/i,
          gs: /\d+\.\d+/,
          offSpec: /[THDB]+/i,
          offGs: /\d+\.\d+/,
          profs: /[A-Z]{2,4}$/i,
        };

        const regexEvento = {
          dia: /^[a-z]/i,
          hora: /\d+/,
          lider: /[a-z]+/i,
          banda: /[a-z]/i,
          dificultad: /\d+[a-z]*$/i,
        };

        // Función para validar el bloque de personaje
        function validarPersonaje(bloque: string): { 
          valido: boolean, 
          mensaje: string, 
          faltantes?: string[],
          mainRole?: string,
          spec?: string,
          gs?: string,
          offSpec?: string,
          offGs?: string
        } {
          // Inicializar variables para almacenar los resultados
          let mainRoleValid = false;
          let specValid = false;
          let gsValid = false;
          let offSpecValid = false;
          let offGsValid = false;
          let profsValid = false;
          
          const errores: string[] = [];
          const faltantes: string[] = [];
          
          // Si el bloque está vacío, es válido pero con advertencia
          if (!bloque.trim()) {
            return { 
              valido: true, 
              mensaje: 'El bloque de personaje está vacío (todos los campos son opcionales)',
              faltantes: ['Main/Alt (M/A)', 'Especialización (T/H/D)']
            };
          }
          
          // Intentar extraer Main/Alt (opcional)
          const mainRoleMatch = bloque.match(/^([MA])/i);
          const mainRole = mainRoleMatch?.[1]?.toUpperCase() || '';
          
          // Validar rol principal (M o A)
          if (mainRole) {
            mainRoleValid = /^[MA]$/i.test(mainRole);
            if (!mainRoleValid) {
              errores.push('El rol principal debe ser M (Main) o A (Alt)');
            }
          } else {
            faltantes.push('Main/Alt (M/A)');
          }
          
          // Extraer especialización principal
          const specMatch = bloque.match(/[MA]?([THDB]+)/i);
          const spec = specMatch?.[1]?.toUpperCase() || '';
          
          // Extraer especialización secundaria (después del primer número)
          const offSpecMatch = bloque.match(/\d+(?:\.\d+)?\s*([THDB]+)/i);
          const offSpec = offSpecMatch?.[1]?.toUpperCase() || '';
          
          // Validar especialización principal
          if (spec) {
            specValid = /^[THD]+$/i.test(spec);
            if (!specValid) {
              errores.push('Especialización inválida. Usa T (Tank), H (Healer) o D (DPS)');
            }
          } else {
            faltantes.push('Especialización (T/H/D)');
          }
          
          // Extraer Gear Scores (puede haber 1 o 2)
          const gsMatches = [...bloque.matchAll(/(\d+(?:\.\d+)?)/g)].map(m => m[0]);
          const gs = gsMatches[0] || '';
          const offGs = gsMatches[1] || '';
          
          // Validar Gear Score principal
          if (gs) {
            const gsValue = parseFloat(gs);
            gsValid = !isNaN(gsValue) && gsValue >= 1 && gsValue <= 10;
            if (!gsValid) {
              errores.push('El Gear Score debe ser un número entre 1.0 y 10.0');
            }
          } else if (bloque.length > 0) {
            // Solo sugerir GS si hay algún dato en el bloque
            faltantes.push('Gear Score (ej: 5.8)');
          }
          
          // Validar Gear Score secundario si está presente
          if (offGs) {
            const offGsValue = parseFloat(offGs);
            if (isNaN(offGsValue) || offGsValue < 1 || offGsValue > 10) {
              errores.push('El Gear Score secundario debe ser un número entre 1.0 y 10.0');
            }
          }
          
          // Validar Profesiones (opcional)
          const profsMatch = bloque.match(/([A-Z]{2,4})$/i);
          const profs = profsMatch?.[1]?.toUpperCase() || '';
          
          // Validar formato de profesiones si están presentes
          if (profs) {
            profsValid = /^[A-Z]{2,4}$/i.test(profs);
            if (!profsValid) {
              errores.push('Formato de profesiones inválido. Usa códigos de 2-4 letras (ej: JC, BS, ENCH)');
            }
          } else if (bloque.length > 0) {
            // Solo sugerir profesiones si hay algún dato en el bloque
            faltantes.push('Profesiones (ej: JC, BS)');
          }

          // Obtener referencia al elemento de mensaje de error
          const mensajeError = document.getElementById('notaError');
          
          // Manejar mensajes de error
          if (errores.length > 0) {
            if (mensajeError) {
              mensajeError.innerHTML = errores.map((e: string) => `❌ ${e}`).join('<br>');
              mensajeError.classList.remove('hidden');
            }
            return { 
              valido: false, 
              mensaje: errores.join('; '),
              faltantes: faltantes,
              mainRole: mainRole,
              spec: spec,
              gs: gs,
              offSpec: offSpec,
              offGs: offGs,
              profs: profs
            };
          } else if (mensajeError) {
            mensajeError.classList.add('hidden');
          }
          
          // Mostrar advertencias si las hay
          if (faltantes.length > 0 && mensajeError) {
            mensajeError.innerHTML = `⚠️ Faltan campos: ${faltantes.join(', ')}`;
            mensajeError.classList.remove('hidden');
          }
          
          // Retornar resultado exitoso
          return {
            valido: true,
            mensaje: 'Válido',
            faltantes: faltantes,
            mainRole: mainRole,
            spec: spec,
            gs: gs,
            offSpec: offSpec,
            offGs: offGs,
            profs: profs
          };
        }

        // Función para validar el bloque de evento
        function validarEvento(bloque: string, { dias, bandas }: { dias: Record<string, string>, bandas: Record<string, string> }) {
          // Extraer partes del bloque de evento
          // Ahora permite códigos de banda de 1-3 letras
          const eventMatch = bloque.match(/^([a-z])(\d+)([a-z]*?)([a-z]{1,3})(\d+[a-z]*)$/i);
          
          // Inicializar arrays para errores y campos faltantes
          const errores: string[] = [];
          const faltantes: string[] = [];
          
          // Validar formato básico
          if (!eventMatch) {
            return {
              valido: false,
              mensaje: 'Formato de evento inválido. Usa: DíaHora[Líder]BandaDificultad (ej: l20rlicc10h)',
              faltantes: ['Día', 'Hora', 'Banda', 'Dificultad']
            };
          }
          
          const [_, dia, hora, lider, banda, dificultad] = eventMatch;
          
          // Validar día
          let diaValido = false;
          if (dia) {
            diaValido = /^[a-z]$/i.test(dia);
            if (!diaValido) {
              errores.push('Día inválido. Usa una letra de L a D');
            }
          } else {
            faltantes.push('Día (ej: L, M, X, J, V, S, D)');
          }
          
          // Validar hora
          let horaValida = false;
          if (hora) {
            const horaNum = parseInt(hora, 10);
            horaValida = !isNaN(horaNum) && horaNum >= 0 && horaNum <= 23;
            if (!horaValida) {
              errores.push('Hora inválida. Usa un número entre 0 y 23');
            }
          } else {
            faltantes.push('Hora (ej: 20 para las 8 PM)');
          }
          
          // Validar banda
          let bandaValida = false;
          if (banda) {
            bandaValida = /^[a-z]{1,3}$/i.test(banda);
            if (!bandaValida) {
              errores.push('Banda inválida. Usa 1-3 letras (ej: icc, toc, rs)');
            }
          } else {
            faltantes.push('Banda (ej: icc, toc, rs)');
          }
          
          // Validar dificultad
          let dificultadValida = false;
          let esHeroico = false;
          let nivelDificultad = '10';
          
          if (dificultad) {
            esHeroico = dificultad.toLowerCase().endsWith('h');
            nivelDificultad = dificultad.replace(/[^0-9]/g, '') || '10';
            const nivelNum = parseInt(nivelDificultad, 10);
            dificultadValida = !isNaN(nivelNum) && nivelNum > 0 && nivelNum <= 30;
            
            if (!dificultadValida) {
              errores.push('Dificultad inválida. Usa un número seguido opcionalmente de "h" para heroico (ej: 10, 25h)');
            }
          } else {
            faltantes.push('Dificultad (ej: 10, 25h)');
          }
          
          // Obtener nombres completos
          const nombreDia = dia ? (dias[dia.toLowerCase()] || dia.toUpperCase()) : '';
          const nombreBanda = banda ? (bandas[banda.toLowerCase()] || banda.toUpperCase()) : '';
          const nombreDificultad = dificultadValida ? 
            (DIFFICULTY_NAMES[`${nivelDificultad}${esHeroico ? 'H' : 'N'}` as keyof typeof DIFFICULTY_NAMES] || 
             `${nivelDificultad} ${esHeroico ? 'Heroico' : 'Normal'}`) : '';
          
          // Generar etiquetas para la vista previa
          const previewEvento = document.getElementById('previewEvento');
          const detallesEvento = document.getElementById('detallesEvento');
          
          if (previewEvento) {
            previewEvento.innerHTML = '';
            const previewTags = document.createElement('div');
            previewTags.className = 'flex flex-wrap gap-1.5 mb-2';
            
            // Día
            if (dia && diaValido) {
              const tag = document.createElement('span');
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-900/50 text-blue-200';
              tag.textContent = DAY_NAMES[dia.toUpperCase() as keyof typeof DAY_NAMES] || dia.toUpperCase();
              tag.title = `Día: ${DAY_NAMES[dia.toUpperCase() as keyof typeof DAY_NAMES] || dia.toUpperCase()}`;
              previewTags.appendChild(tag);
            } else if (dia) {
              const tag = document.createElement('span');
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-900/50 text-red-200';
              tag.textContent = 'Día Inválido';
              tag.title = 'Día inválido. Usa una letra de L a D';
              previewTags.appendChild(tag);
            }

            // Hora
            if (hora && horaValida) {
              const tag = document.createElement('span');
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-900/50 text-purple-200';
              const horaFormateada = `${hora.padStart(2, '0')}:00`;
              tag.textContent = horaFormateada;
              tag.title = `Hora: ${horaFormateada}`;
              previewTags.appendChild(tag);
            } else if (hora) {
              const tag = document.createElement('span');
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-900/50 text-red-200';
              tag.textContent = 'Hora Inválida';
              tag.title = 'Hora inválida. Usa un número entre 0 y 23';
              previewTags.appendChild(tag);
            }

            // Líder - Mostrar 'Busco' cuando no hay líder
            const tagLider = document.createElement('span');
            tagLider.className = `inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${
              lider && lider.toLowerCase() === 'rl' ? 'bg-green-900/50 text-green-200' : 'bg-amber-900/50 text-amber-200'
            }`;
            tagLider.textContent = lider && lider.toLowerCase() === 'rl' ? 'Armo' : 'Busco';
            tagLider.title = lider ? `Líder: ${lider.toUpperCase()}` : 'Buscando grupo';
            previewTags.appendChild(tagLider);

            // Banda
            if (banda && bandaValida) {
              const tag = document.createElement('span');
              // Primero intenta con el código completo (para códigos de 2-3 letras como ICC, TOC, etc.)
              const codigoBanda = banda.toUpperCase();
              let nombreBandaCompleto = RAID_NAMES[codigoBanda as keyof typeof RAID_NAMES];
              
              // Si no se encuentra, intenta con el mapeo de una letra
              if (!nombreBandaCompleto && banda.length === 1) {
                const bandaMapeada = bandas[banda.toLowerCase()];
                nombreBandaCompleto = RAID_NAMES[bandaMapeada as keyof typeof RAID_NAMES];
              }
              
              // Si aún no se encuentra, usa el código original
              if (!nombreBandaCompleto) {
                nombreBandaCompleto = codigoBanda;
              }
              
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-900/50 text-yellow-200';
              tag.textContent = nombreBandaCompleto;
              tag.title = `Banda: ${nombreBandaCompleto} (${codigoBanda})`;
              previewTags.appendChild(tag);
            } else if (banda) {
              const tag = document.createElement('span');
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-900/50 text-red-200';
              tag.textContent = 'Banda Inválida';
              tag.title = 'Banda inválida. Usa 1-3 letras (ej: icc, toc, rs)';
              previewTags.appendChild(tag);
            }

            // Dificultad
            if (dificultad && dificultadValida) {
              const tag = document.createElement('span');
              const dificultadKey = `${nivelDificultad}${esHeroico ? 'H' : 'N'}` as keyof typeof DIFFICULTY_NAMES;
              const nombreDificultad = DIFFICULTY_NAMES[dificultadKey] || `${nivelDificultad} ${esHeroico ? 'Heroico' : 'Normal'}`;
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-pink-900/50 text-pink-200';
              tag.textContent = nombreDificultad;
              tag.title = `Dificultad: ${nombreDificultad}`;
              previewTags.appendChild(tag);
            } else if (dificultad) {
              const tag = document.createElement('span');
              tag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-900/50 text-red-200';
              tag.textContent = 'Dificultad Inválida';
              tag.title = 'Dificultad inválida. Usa un número seguido opcionalmente de "h" para heroico (ej: 10, 25h)';
              previewTags.appendChild(tag);
            }
            
            previewEvento.appendChild(previewTags);
            
            // Mostrar campos faltantes si existen
            if (detallesEvento) {
              detallesEvento.innerHTML = '';
              
              if (faltantes.length > 0) {
                const faltantesDiv = document.createElement('div');
                faltantesDiv.className = 'mt-2 text-xs text-amber-300/80';
                faltantesDiv.innerHTML = `<span class="font-semibold">Faltan:</span> ${faltantes.join(', ')}`;
                detallesEvento.appendChild(faltantesDiv);
              }
              
              if (errores.length > 0) {
                const erroresDiv = document.createElement('div');
                erroresDiv.className = 'mt-2 text-xs text-red-300/80';
                erroresDiv.innerHTML = errores.map(e => `❌ ${e}`).join('<br>');
                detallesEvento.appendChild(erroresDiv);
              }
            }
          }
          
          const esValido = diaValido && horaValida && bandaValida && dificultadValida;
          
          return {
            valido: esValido,
            mensaje: esValido ? 'Evento válido' : 'Evento inválido',
            faltantes: esValido ? [] : faltantes,
            dia: dia,
            hora: hora,
            lider: lider,
            banda: banda,
            dificultad: dificultad,
            esHeroico: esHeroico,
            nivelDificultad: nivelDificultad
          };
        }


        // Manejador de eventos para el input
        if (notaInput) {
          function limpiarResultados() {
            if (detallesPersonaje) detallesPersonaje.innerHTML = '';
            if (detallesEvento) detallesEvento.innerHTML = '';
            const previewPersonaje = document.getElementById('previewPersonaje');
            const previewEvento = document.getElementById('previewEvento');
            if (previewPersonaje) previewPersonaje.innerHTML = '';
            if (previewEvento) previewEvento.innerHTML = '';
            if (notaError) notaError.classList.add('hidden');
            if (notaResult) notaResult.classList.add('hidden');
          }

          notaInput.addEventListener('input', (e) => {
            const target = e.target as HTMLInputElement;
            if (!target) return;

            const nota = target.value.trim();

            if (!nota) {
              limpiarResultados();
              return;
            }

            // Usar las constantes importadas
            const dias = DAY_NAMES;
            const bandas = BANDA_CODES;

            // Validar bloques separados por espacios
            const bloques = nota.split(/\s+/);
            
            // Buscar bloque de personaje (puede ser solo M o A, o incluir más detalles)
            const bloquePersonaje = bloques.find(bloque => 
              /^[MA]([THDB]|$)/i.test(bloque) // Debe empezar con M o A, seguido opcionalmente de una letra de especialización
            );
            
            // Buscar bloque de evento (formato: letraDía + númeroHora + letraLíder + códigoBanda + númeroDificultad)
            const bloqueEvento = bloques.find(bloque => {
              // Ajustar la expresión regular para manejar códigos de banda de 1-3 letras
              const eventMatch = bloque.match(/^([a-z])(\d+)([a-z]*?)([a-z]{1,3})(\d+[a-z]*)$/i);
              if (!eventMatch) return false;
              
              const [_, dia, hora, lider, banda, dificultad] = eventMatch;
              // El líder es opcional, pero debe haber un código de banda
              return dia && hora && banda && dificultad;
            });

            let tienePersonaje = false;
            let tieneEvento = false;

            // Limpiar resultados previos
            const previewPersonaje = document.getElementById('previewPersonaje');
            const previewEvento = document.getElementById('previewEvento');
            if (previewPersonaje) previewPersonaje.innerHTML = '';
            if (detallesPersonaje) detallesPersonaje.innerHTML = '';
            if (detallesEvento) detallesEvento.innerHTML = '';

            // Validar bloques si existen
            if (bloquePersonaje) {
              // Limpiar contenedores de vista previa
              if (previewPersonaje) previewPersonaje.innerHTML = '';
              if (detallesPersonaje) detallesPersonaje.innerHTML = '';
              
              const resultadoValidacion = validarPersonaje(bloquePersonaje);
              tienePersonaje = resultadoValidacion.valido;
              
              // Crear contenedor para las etiquetas de vista previa
              const previewTags = document.createElement('div');
              previewTags.className = 'flex flex-wrap gap-1.5 mb-2';
              
              // Agregar etiqueta de Main/Alt si existe
              if (resultadoValidacion.mainRole) {
                const mainRoleTag = document.createElement('span');
                const rolCompleto = STATUS[resultadoValidacion.mainRole as keyof typeof STATUS] || resultadoValidacion.mainRole;
                mainRoleTag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-900/50 text-blue-200';
                mainRoleTag.textContent = rolCompleto;
                mainRoleTag.title = `Rol: ${rolCompleto}`;
                previewTags.appendChild(mainRoleTag);
              }
              
              // Agregar etiqueta de especialización principal si existe
              if (resultadoValidacion.spec) {
                const specTag = document.createElement('span');
                const specs = Array.from(resultadoValidacion.spec).map(s => 
                  ROLES[s as keyof typeof ROLES] || s
                ).join('');
                specTag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-900/50 text-purple-200';
                specTag.textContent = specs;
                specTag.title = `Especialización: ${specs}`;
                previewTags.appendChild(specTag);
              }
              
              // Agregar etiqueta de GS principal si existe
              if (resultadoValidacion.gs) {
                const gsTag = document.createElement('span');
                gsTag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-cyan-900/50 text-cyan-200';
                gsTag.textContent = resultadoValidacion.gs;
                gsTag.title = `Gear Score: ${resultadoValidacion.gs}`;
                previewTags.appendChild(gsTag);
              }
              
              // Agregar etiqueta de especialización secundaria si existe
              if (resultadoValidacion.offSpec) {
                const offSpecTag = document.createElement('span');
                const offSpecs = Array.from(resultadoValidacion.offSpec).map(s => 
                  ROLES[s as keyof typeof ROLES] || s
                ).join('');
                offSpecTag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-fuchsia-900/50 text-fuchsia-200';
                offSpecTag.textContent = `Dual: ${offSpecs}`;
                offSpecTag.title = `Especialización Secundaria: ${offSpecs}`;
                previewTags.appendChild(offSpecTag);
              }
              
              // Agregar etiqueta de GS secundario si existe
              if (resultadoValidacion.offGs) {
                const offGsTag = document.createElement('span');
                offGsTag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-teal-900/50 text-teal-200';
                offGsTag.textContent = resultadoValidacion.offGs;
                offGsTag.title = `Gear Score Secundario: ${resultadoValidacion.offGs}`;
                previewTags.appendChild(offGsTag);
              }
              
              // Agregar etiqueta de profesiones si existen
              if (resultadoValidacion.profs) {
                const profsTag = document.createElement('span');
                profsTag.className = 'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-amber-900/50 text-amber-200';
                profsTag.textContent = resultadoValidacion.profs;
                profsTag.title = `Profesiones: ${resultadoValidacion.profs}`;
                previewTags.appendChild(profsTag);
              }
              
              // Mostrar etiquetas en el contenedor de vista previa
              if (previewPersonaje) {
                previewPersonaje.appendChild(previewTags);
              }
              
              // Mostrar campos faltantes si existen
              if (detallesPersonaje) {
                if (resultadoValidacion.faltantes && resultadoValidacion.faltantes.length > 0) {
                  const faltantesDiv = document.createElement('div');
                  faltantesDiv.className = 'mt-2 text-xs text-amber-300/80';
                  faltantesDiv.innerHTML = `<span class="font-semibold">Faltan:</span> ${resultadoValidacion.faltantes.join(', ')}`;
                  detallesPersonaje.appendChild(faltantesDiv);
                }
                
                // Mostrar mensaje de error si existe
                if (!resultadoValidacion.valido && resultadoValidacion.mensaje) {
                  const errorDiv = document.createElement('div');
                  errorDiv.className = 'text-amber-400 text-sm mt-2';
                  errorDiv.textContent = resultadoValidacion.mensaje;
                  detallesPersonaje.appendChild(errorDiv);
                }
              }
            } else if (detallesPersonaje) {
              detallesPersonaje.innerHTML = `
                <div class="text-amber-300/80 mb-2">Formato: M o A seguido opcionalmente de especialización (ej: MT, AH5.8)</div>
                <div class="text-amber-300/80 text-sm">
                  <div class="font-semibold">Opcional:</div>
                  <ul class="list-disc list-inside">
                    <li>Gear Score (ej: 5.8)</li>
                    <li>Especialización secundaria (ej: H para Heal)</li>
                    <li>Profesiones (ej: JC, BS)</li>
                  </ul>
                </div>
              `;
            }

            if (bloqueEvento) {
              const resultadoValidacion = validarEvento(bloqueEvento, { dias, bandas });
              tieneEvento = resultadoValidacion.valido;
              
              // Mostrar campos faltantes o errores si los hay
              if (detallesEvento) {
                detallesEvento.innerHTML = '';
                
                if (resultadoValidacion.faltantes && resultadoValidacion.faltantes.length > 0) {
                  const faltantesDiv = document.createElement('div');
                  faltantesDiv.className = 'mt-2 text-xs text-amber-300/80';
                  faltantesDiv.innerHTML = `<span class="font-semibold">Faltan:</span> ${resultadoValidacion.faltantes.join(', ')}`;
                  detallesEvento.appendChild(faltantesDiv);
                }
                
                if (!resultadoValidacion.valido && resultadoValidacion.mensaje) {
                  const errorDiv = document.createElement('div');
                  errorDiv.className = 'text-amber-400 text-sm mt-2';
                  errorDiv.textContent = resultadoValidacion.mensaje;
                  detallesEvento.appendChild(errorDiv);
                }
              }
            } else if (detallesEvento) {
              detallesEvento.innerHTML = `
                <div class="text-amber-300/80 mb-2">Formato: DíaHora[Líder]BandaDificultad (ej: l20rlicc10h)</div>
                <div class="text-amber-300/80 text-sm">
                  <div class="font-semibold">Detalles:</div>
                  <ul class="list-disc list-inside">
                    <li>Día: L (Lunes) a D (Domingo)</li>
                    <li>Hora: 0-23 (ej: 20 para las 8 PM)</li>
                    <li>Líder: Opcional, 'rl' para indicar que arma el grupo</li>
                    <li>Banda: 1-3 letras (ej: icc, toc, rs)</li>
                    <li>Dificultad: Número + 'h' opcional para heroico (ej: 10, 25h)</li>
                  </ul>
                </div>
              `;
            }

            // Actualizar iconos principales
            const personajeIcon = document.getElementById('personajeIcon');
            const personajeText = document.getElementById('personajeText');
            const eventoIcon = document.getElementById('eventoIcon');
            const eventoText = document.getElementById('eventoText');

            if (personajeIcon && personajeText) {
              personajeIcon.textContent = tienePersonaje ? '✓' : '✗';
              personajeIcon.className = `w-5 mt-0.5 ${tienePersonaje ? 'text-green-400' : 'text-red-400'} font-bold`;
              personajeText.className = tienePersonaje
                ? 'font-medium'
                : 'font-medium text-amber-100/70';
            }

            if (eventoIcon && eventoText) {
              eventoIcon.textContent = tieneEvento ? '✓' : '✗';
              eventoIcon.className = `w-5 mt-0.5 ${tieneEvento ? 'text-green-400' : 'text-red-400'} font-bold`;
              eventoText.className = tieneEvento ? 'font-medium' : 'font-medium text-amber-100/70';
            }

            // Mostrar resultados
            if (notaResult && (tienePersonaje || tieneEvento)) {
              notaResult.classList.remove('hidden');
              if (notaError) notaError.classList.add('hidden');
            } else if (notaError) {
              notaError.textContent =
                'Formato de nota no reconocido. Asegúrate de seguir el formato mostrado.';
              notaError.classList.remove('hidden');
              if (notaResult) notaResult.classList.add('hidden');
            }
          });
        }
      </script>
    </section>

    <!-- Formato de la Nota -->
    <section
      class="bg-gradient-to-br from-steel-darker/90 to-steel-dark/90 backdrop-blur-sm p-6 rounded-xl border border-amber-900/30 shadow-lg mb-8 hover:border-amber-800/50 transition-colors duration-200"
    >
      <div class="flex items-center mb-6">
        <div class="bg-amber-900/50 p-2 rounded-lg mr-3">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6 text-amber-300"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            ></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-amber-200">Formato de la Nota</h2>
      </div>
      <div class="grid md:grid-cols-2 gap-6">
        <!-- Estructura Básica -->
        <div
          class="bg-steel-darker/80 p-5 rounded-lg border border-amber-900/30 hover:border-amber-700/50 transition-colors duration-200"
        >
          <h2 class="text-lg font-semibold text-amber-200 mb-3 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 text-amber-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            BLOQUE DE PERSONAJE
          </h2>
          <div class="flex flex-wrap gap-1 mb-2">
            <span class="text-yellow-300 font-mono text-sm">[</span>
            <span class="text-blue-300 font-mono text-sm">M/A</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-purple-300 font-mono text-sm">Rol Principal</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-green-300 font-mono text-sm">GS Principal</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-red-300 font-mono text-sm">Rol Secundario</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-pink-300 font-mono text-sm">GS Secundario</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-cyan-300 font-mono text-sm">Profesiones</span>
            <span class="text-yellow-300 font-mono text-sm">]</span>
          </div>
          <div class="p-3 bg-steel-dark/50 rounded-lg">
            <span class="text-xs font-medium text-text-muted/80 mb-1">Ejemplo:</span>
            <div
              class="px-3 py-2 bg-steel-darker rounded font-mono text-sm whitespace-nowrap overflow-x-auto"
            >
              <span class="text-blue-300 font-semibold">M</span><span
                class="text-purple-300 font-semibold">T</span
              ><span class="text-green-300 font-semibold">6.5</span><span
                class="text-red-300 font-semibold">H</span
              ><span class="text-pink-300 font-semibold">5.5</span><span
                class="text-cyan-300 font-semibold">JCEN</span
              >
            </div>
          </div>
          <!-- Guía Rápida -->
          <div class="relative group">
            <h2 class="text-lg font-semibold text-amber-200 mb-3 flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2 text-amber-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H2m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                ></path>
              </svg>
              DATOS DEL PERSONAJE
            </h2>
            <div class="bg-amber-900/10 p-5 rounded-lg border border-amber-900/20 hover:border-amber-700/50 transition-colors duration-200 backdrop-blur-sm">
              <div class="grid grid-cols-1 gap-3">
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">M/A</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Indica si es tu personaje principal (M) o alternativo (A)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">T/H/D</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Rol principal (Tank/Healer/DPS)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">X.X</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Gear Score Principal (ej: 6.2, 5.8)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">T/H/D</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Rol Secundario (Tank/Healer/DPS)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">X.X</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Gear Score Secundario (ej: 6.2, 5.8)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">JCBS</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Tus profesiones principales (ver sección de profesiones)</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="bg-steel-darker/80 p-5 rounded-lg border border-amber-900/30 hover:border-amber-700/50 transition-colors duration-200">
          <h2 class="text-lg font-semibold text-amber-200 mb-3 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 text-amber-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              ></path>
            </svg>
            BLOQUE DE EVENTO
          </h2>
          <div class="flex flex-wrap gap-1 mb-2">
            <span class="text-yellow-300 font-mono text-sm">[</span>
            <span class="text-blue-300 font-mono text-sm">Dia/s</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-purple-300 font-mono text-sm">Horario</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-green-300 font-mono text-sm">Raid Leader</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-red-300 font-mono text-sm">Banda</span>
            <span class="text-yellow-300 font-mono text-sm">][</span>
            <span class="text-pink-300 font-mono text-sm">Dificultad</span>
            <span class="text-yellow-300 font-mono text-sm">]</span>
          </div>
          <div class="p-3 bg-steel-dark/50 rounded-lg">
            <span class="text-xs font-medium text-text-muted/80 mb-1">Ejemplo:</span>
            <div
              class="px-3 py-2 bg-steel-darker rounded font-mono text-sm whitespace-nowrap overflow-x-auto"
            >
              <span class="text-blue-300 font-semibold">x</span><span
                class="text-purple-300 font-semibold">18</span
              ><span class="text-green-300 font-semibold">rl</span><span
                class="text-red-300 font-semibold">voa</span
              ><span class="text-pink-300 font-semibold">25n</span>
            </div>
          </div>
          <div>
            <h2 class="text-lg font-semibold text-amber-100 mb-3 flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2 text-amber-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              DATOS DEL EVENTO
            </h2>
            <div class="bg-amber-900/10 p-5 rounded-lg border border-amber-900/20 hover:border-amber-700/50 transition-colors duration-200 backdrop-blur-sm">
              <div class="grid grid-cols-1 gap-3">
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-16 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">LMXJVS</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Días de la semana conectado (ej: LJ, L-V)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-16 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">HORA</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Hora de conexión (ej: 18:00, 20)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-16 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">RL</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Raid Leader es quien arma y lidera el evento</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-16 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">BANDA</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Nombre de la banda (ej: VOA, ICC)</span>
                </div>
                <div class="flex items-start group">
                  <span class="bg-amber-900/50 text-amber-300 font-mono w-16 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors shrink-0">DIF</span>
                  <span class="text-amber-100 group-hover:text-amber-50 transition-colors">Dificultad del evento (ej: 10n, 25H)</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="mt-6 p-4 bg-amber-900/20 border border-amber-800/30 rounded-lg backdrop-blur-sm">
        <div class="flex items-center mb-2">
          <div class="bg-amber-900/50 p-1.5 rounded-md mr-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 text-amber-300"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h4 class="text-amber-200 font-medium">Consejos importantes</h4>
        </div>
        <ul class="grid grid-cols-1 md:grid-cols-2 gap-2 list-disc pl-5">
          <li class="text-sm text-amber-100/90 hover:text-amber-50 transition-colors duration-150">
            Usa espacios para separar cada tipo bloque.
          </li>
          <li class="text-sm text-amber-100/90 hover:text-amber-50 transition-colors duration-150">
            No debe haber espacios entre los datos de cada bloque.
          </li>
          <li class="text-sm text-amber-100/90 hover:text-amber-50 transition-colors duration-150">
            No uses caracteres especiales como paréntesis, espacios o guiones.
          </li>
          <li class="text-sm text-amber-100/90 hover:text-amber-50 transition-colors duration-150">
            Para rangos de dias usa -, para rangos de horario :.
          </li>
          <li class="text-sm text-amber-100/90 hover:text-amber-50 transition-colors duration-150">
            Recuerda actualizar tu nota pública cuando cambies de equipo, profesiones o
            disponibilidad.
          </li>
          <li class="text-sm text-amber-100/90 hover:text-amber-50 transition-colors duration-150">
            Si tienes dudas sobre el formato o necesitas ayuda, contacta con un oficial de la
            hermandad.
          </li>
          <li class="text-sm text-amber-100/90 hover:text-amber-50 transition-colors duration-150">
            Una nota clara y completa aumenta tus posibilidades de ser seleccionado para los
            raideos.
          </li>
        </ul>
      </div>
    </section>

    <!-- Sección de Profesiones -->
    <section
      class="bg-gradient-to-br from-steel-darker/90 to-steel-dark/90 backdrop-blur-sm p-6 rounded-xl border border-amber-900/30 shadow-lg mb-8 hover:border-amber-800/50 transition-colors duration-200"
    >
      <div class="flex items-center mb-6">
        <div class="bg-amber-900/50 p-2 rounded-lg mr-3">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6 text-amber-300"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            ></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-amber-200">Profesiones</h2>
      </div>

      <p class="text-amber-100/90 mb-6">
        Especifica tus dos profesiones principales usando las abreviaturas de 2 letras sin espacios.
      </p>

      <div class="grid md:grid-cols-2 gap-6">
        <!-- Profesiones de Producción -->
        <div
          class="bg-steel-darker/80 p-5 rounded-lg border border-amber-900/30 hover:border-amber-700/50 transition-colors"
        >
          <h3 class="text-lg font-semibold text-amber-200 mb-4 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 text-amber-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
              ></path>
            </svg>
            Producción
          </h3>
          <div class="grid grid-cols-2 gap-3">
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >JC</span
              >
              <span class="text-amber-100">Joyería</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >BS</span
              >
              <span class="text-amber-100">Herrería</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >EN</span
              >
              <span class="text-amber-100">Encantamiento</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >EG</span
              >
              <span class="text-amber-100">Ingeniería</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >LW</span
              >
              <span class="text-amber-100">Peletería</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >AL</span
              >
              <span class="text-amber-100">Alquimia</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >TL</span
              >
              <span class="text-amber-100">Sastrería</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >IN</span
              >
              <span class="text-amber-100">Inscripción</span>
            </div>
          </div>
        </div>

        <!-- Profesiones de Recolección -->
        <div
          class="bg-steel-darker/80 p-5 rounded-lg border border-amber-900/30 hover:border-amber-700/50 transition-colors"
        >
          <h3 class="text-lg font-semibold text-amber-200 mb-4 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 text-amber-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A2 2 0 013 12V7a4 4 0 014-4z"
              ></path>
            </svg>
            Recolección
          </h3>
          <div class="grid grid-cols-2 gap-3">
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >HB</span
              >
              <span class="text-amber-100">Herboristería</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >MN</span
              >
              <span class="text-amber-100">Minería</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-10 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >SK</span
              >
              <span class="text-amber-100">Desuello</span>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Sección de Bandas y Dificultades -->
    <section
      class="bg-gradient-to-br from-steel-darker/90 to-steel-dark/90 backdrop-blur-sm p-6 rounded-xl border border-amber-900/30 shadow-lg hover:border-amber-800/50 transition-colors duration-200"
    >
      <div class="flex items-center mb-6">
        <div class="bg-amber-900/50 p-2 rounded-lg mr-3">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6 text-amber-300"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
            ></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-amber-200">Bandas y Dificultades</h2>
      </div>

      <div class="grid md:grid-cols-2 gap-8">
        <!-- Bandas -->
        <div
          class="bg-steel-darker/80 p-5 rounded-lg border border-amber-900/30 hover:border-amber-700/50 transition-colors"
        >
          <h3 class="text-lg font-semibold text-amber-200 mb-4 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 text-amber-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
              ></path>
            </svg>
            Bandas Disponibles
          </h3>
          <div class="grid grid-cols-2 gap-3">
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >ICC</span
              >
              <span class="text-amber-100">Ciudadela del Corona de Hielo</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >TOC</span
              >
              <span class="text-amber-100">Prueba del Cruzado</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >ULD</span
              >
              <span class="text-amber-100">Ulduar</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >NAX</span
              >
              <span class="text-amber-100">Naxxramas</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >OS</span
              >
              <span class="text-amber-100">Santuario Obsidiana</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >RS</span
              >
              <span class="text-amber-100">Santuario Rubí</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >EOE</span
              >
              <span class="text-amber-100">Ojo de la Eternidad</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >VOA</span
              >
              <span class="text-amber-100">La Cámara de Archavon</span>
            </div>
          </div>
        </div>

        <!-- Dificultades -->
        <div
          class="bg-steel-darker/80 p-5 rounded-lg border border-amber-900/30 hover:border-amber-700/50 transition-colors"
        >
          <h3 class="text-lg font-semibold text-amber-200 mb-4 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 text-amber-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
              ></path>
            </svg>
            Dificultades
          </h3>
          <div class="grid grid-cols-1 gap-3">
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >10N</span
              >
              <span class="text-amber-100">10 Jugadores Normal</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >25N</span
              >
              <span class="text-amber-100">25 Jugadores Normal</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >10H</span
              >
              <span class="text-amber-100">10 Jugadores Heroico</span>
            </div>
            <div
              class="flex items-center bg-amber-900/10 hover:bg-amber-900/20 p-3 rounded-lg border border-amber-900/20 transition-colors group"
            >
              <span
                class="bg-amber-900/50 text-amber-300 font-mono w-12 text-center py-1 rounded mr-3 group-hover:bg-amber-800/50 transition-colors"
                >25H</span
              >
              <span class="text-amber-100">25 Jugadores Heroico</span>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</Layout>
